# -*- coding: utf-8 -*-
"""drl_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/MikailINTech/DRL-for-Finance/blob/main/drl_project.ipynb

# Intialisation
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import random
import math
from datetime import datetime

import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import torchvision.transforms as T
from collections import namedtuple, deque
from itertools import count

Transition = namedtuple('Transition', ('state', 'action', 'next_state', 'reward'))
def reward(weights, factors_returns, strategy_returns):
    '''
    The assumed formula is : 
    reward = [return by agent - "groundtruth" or financial strategy] + stability of the agent (?)
    '''
    pred_returns = (1 + (weights * factors_returns).sum(axis=1)).cumprod().pct_change().fillna(0)
    tracking_error = (pred_returns.values - strategy_returns.iloc[:, 0].values) * np.sqrt(250) * np.sqrt(
        weights.shape[1] + 1)
    reward = -np.sqrt(np.mean(tracking_error ** 2))
    return reward


def teacher_reward(weights, factors_returns, strategy_returns):
    pred_returns = (1 + (weights * factors_returns).sum(axis=1)).cumprod().pct_change().fillna(0)
    tracking_error = (pred_returns.values - strategy_returns.iloc[:, 0].values) * np.sqrt(250) * np.sqrt(
        weights.shape[1] + 1)
    turn_over = 0.0020 * 365 * (weights - weights.shift(1)).abs().fillna(0).values / (
                weights.index[-1] - weights.index[0]).days * np.sqrt(weights.shape[0] * (weights.shape[1] + 1))
    error_terms = np.concatenate([tracking_error, turn_over.flatten()], axis=0)
    return -np.sqrt(np.mean(error_terms ** 2))


class ReplayMemory(object):

    def __init__(self, capacity):
        self.memory = deque([], maxlen=capacity)

    def push(self, *args):
        """Save a transition"""
        self.memory.append(Transition(*args))

    def sample(self, batch_size):
        return random.sample(self.memory, batch_size)

    def __len__(self):
        return len(self.memory)

class DQN(nn.Module):

    def __init__(self, num_classes, input_size, hidden_size):
        super(DQN, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.fc2 = nn.Linear(hidden_size, hidden_size)
        self.fc3 = nn.Linear(hidden_size, hidden_size)
        self.fco = nn.Linear(hidden_size, num_classes)

    def forward(self, x):
        x = F.relu(self.fc1(x))
        # x = F.relu(self.fc2(x))
        # x = F.relu(self.fc3(x))
        x = F.softmax(self.fco(x))
        return x


def select_action(state):
    global steps_done
    sample = random.random()
    eps_threshold = EPS_END + (EPS_START - EPS_END) * math.exp(-1. * steps_done / EPS_DECAY)
    steps_done += 1
    if sample > eps_threshold:
        with torch.no_grad():
            return policy_net(state.float()).unsqueeze(0)
    vector = np.random.rand(1, num_classes)
    vector = vector / vector.sum()
    return torch.tensor(vector[0], device=device).unsqueeze(0)


def optimize_model():
    if len(memory) < BATCH_SIZE:
        return
    transitions = memory.sample(BATCH_SIZE)
    # Transpose the batch (see https://stackoverflow.com/a/19343/3343043 for
    # detailed explanation). This converts batch-array of Transitions
    # to Transition of batch-arrays.
    batch = Transition(*zip(*transitions))

    # Compute a mask of non-final states and concatenate the batch elements
    # (a final state would've been the one after which simulation ended)
    non_final_mask = torch.tensor(tuple(map(lambda s: s is not None, batch.next_state)), device=device, dtype=torch.bool)
    non_final_next_states = torch.cat([s for s in batch.next_state if s is not None])
    state_batch = torch.cat(batch.state)
    action_batch = torch.cat(batch.action)
    reward_batch = torch.cat(batch.reward)

    # Compute Q(s_t, a) - the model computes Q(s_t), then we select the
    # columns of actions taken. These are the actions which would've been taken
    # for each batch state according to policy_net
    state_action_values = policy_net(state_batch.float()).gather(1, action_batch.type(torch.int64))

    # Compute V(s_{t+1}) for all next states.
    # Expected values of actions for non_final_next_states are computed based
    # on the "older" target_net; selecting their best reward with max(1)[0].
    # This is merged based on the mask, such that we'll have either the expected
    # state value or 0 in case the state was final.
    next_state_values = torch.zeros(BATCH_SIZE, device=device)
    next_state_values[non_final_mask] = target_net(non_final_next_states.float()).max(1)[0].detach()
    # Compute the expected Q values
    expected_state_action_values = (next_state_values * GAMMA) + reward_batch

    # Compute Huber loss
    criterion = nn.SmoothL1Loss()
    loss = criterion(state_action_values, expected_state_action_values.unsqueeze(1))

    # Optimize the model
    optimizer.zero_grad()
    loss.backward()
    for param in policy_net.parameters():
        param.grad.data.clamp_(-1, 1)
    optimizer.step()

class States:

    def __init__(self, factors_returns):
        self.factors_returns = factors_returns
        pass

    def get_state(self, episode_ix):
        return torch.tensor(self.factors_returns.iloc[episode_ix, :], device=device).unsqueeze(0)

    def get_dimension(self):
        return 11

def give_weights(states):
    weights_pred = []
    for i_episode in range(len(factors_returns)):
        state = states.get_state(i_episode)
        for t in [0]:
            # Select and perform an action
            # print(state)
            action = select_action(state)
            weights_pred.append(action)
    return torch.stack(weights_pred)

if __name__ == '__main__':

    BATCH_SIZE = 128
    GAMMA = 0.999
    EPS_START = 0.9
    EPS_END = 0.05
    EPS_DECAY = 200
    TARGET_UPDATE = 10


    # setup
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print("device:", device)
    sns.set(style='darkgrid')
    sns.set(rc={'figure.figsize': (15, 8)})

    # read factors
    dateparse = lambda x: datetime.strptime(x, '%Y-%m-%d')
    factors_returns = pd.read_csv('factors_returns.csv', index_col=0, parse_dates=True, date_parser=dateparse)
    strategy_returns = pd.read_csv('strategy_returns.csv', index_col=0, parse_dates=True, date_parser=dateparse)
    states = States(factors_returns)

    # create simple random weights (equal weight plus some noise 4% per annum)
    data = np.tile([1 / factors_returns.shape[1]] * factors_returns.shape[1], factors_returns.shape[0]).reshape(factors_returns.shape)

    # build dataframe
    df = pd.DataFrame()
    for name in factors_returns.columns:
        df[name + ' price'] = 100 * (1 + factors_returns[name]).cumprod()
    df['Strategy price'] = 100 * (1 + strategy_returns['Last Price']).cumprod()

    # initializing networks
    num_classes = len(factors_returns.columns)
    input_size = states.get_dimension()
    hidden_size = 64
    policy_net = DQN(num_classes, input_size, hidden_size).to(device)
    target_net = DQN(num_classes, input_size, hidden_size).to(device)
    target_net.load_state_dict(policy_net.state_dict())
    target_net.eval()
    optimizer = optim.RMSprop(policy_net.parameters())
    memory = ReplayMemory(10000)

    # training
    steps_done = 0
    states = States(factors_returns)
    num_episodes = 300
    weights_pred = []
    for i_episode in range(num_episodes):
        state = states.get_state(i_episode)
        for t in [0]:
            # Select and perform an action
            action = select_action(state)
            weights_pred.append(action)
            weights_tensor = action
            weights_df = pd.DataFrame(index=factors_returns[i_episode:i_episode + 1].index,
                                      columns=factors_returns.columns)
            weights_df.iloc[0] = weights_tensor.cpu()
            o_reward = reward(weights_df, factors_returns[i_episode:i_episode + 1],
                              strategy_returns[i_episode:i_episode + 1])
            print(o_reward)
            o_reward = torch.tensor([o_reward], device=device)

            # Observe new state
            # last_screen = current_screen
            # current_screen = get_screen()
            if i_episode < len(factors_returns):
                # next_state = current_screen - last_screen
                next_state = torch.tensor(factors_returns.iloc[i_episode + 1, :])
            else:
                next_state = None

            # Store the transition in memory
            memory.push(state, action, next_state, o_reward)

            # Move to the next state
            state = next_state

            # Perform one step of the optimization (on the policy network)
            optimize_model()

        # Update the target network, copying all weights and biases in DQN
        if i_episode % TARGET_UPDATE == 0:
            target_net.load_state_dict(policy_net.state_dict())
    print('Complete')

    weights_tensor = give_weights(states)
    weights_predicted = pd.DataFrame(index=factors_returns.index, columns=factors_returns.columns)
    weights_predicted[:] = weights_tensor.cpu().numpy()

    print('reward {:.4}, teacher reward {:.4}'.format(reward(weights_predicted, factors_returns, strategy_returns),
                                                      teacher_reward(weights_predicted, factors_returns, strategy_returns)))

    pred_returns = pd.DataFrame()
    pred_returns['Last Price'] = (1 + (weights_predicted * factors_returns).sum(axis=1)).cumprod().pct_change().fillna(0)

    pred_returns.head()

    df['Agent price'] = 100 * (1 + pred_returns['Last Price']).cumprod()

    plt.plot(df[['Strategy price', 'Agent price']])
    plt.legend(df[['Strategy price', 'Agent price']].columns, loc='upper left')
    plt.show()